
import java.io.*;
import nn.*;
import nncoach.TestCase;
import nncoach.TestResult;
import nncoach.TrainCase;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {


    public static void main(final String[] args) {

        Network network = initNetwork();

        train(network, new File(PATH_TRAIN), 784, 255.0);
        test(network, new File(PATH_TEST), 784, 255.0);

        System.out.println("Done");
    }

    private final static String PATH_TRAIN = "./data/mnist_train_short.csv";
    private final static String PATH_TEST = "./data/mnist_test_short.csv";


    private static Network initNetwork() {
        Network network = new Network();
        network.addLayer(784);
        network.addLayer(200);
        network.addLayer(10);
        return network;
    }



    private static void train(Network n, File trainData, int inputsize, double scale) {
        try (BufferedReader reader = new BufferedReader(new FileReader(trainData))) {
            String line;

            while ((line = reader.readLine()) != null) {


                String[] input = line.split(",");

                int target = Integer.parseInt(input[0]);
                double[] targets = new double[]{0.01d, 0.01d, 0.01d, 0.01d, 0.01d, 0.01d, 0.01d, 0.01d, 0.01d, 0.01d};
                targets[target] = 0.99d;


                double[] inputs = new double[inputsize];
                for (int i = 1; i <= inputs.length; i++) {
                    inputs[i-1] = getInputValue(input[i], scale);
                }

                TrainCase trainCase = new TrainCase(target, inputs);

                n.train(inputs, targets);
            }
        } catch (IOException e) {
            System.out.println(e.getMessage());
        }
    }



    private static double getInputValue(String val, double scale) {
        double value = Double.parseDouble(val) / scale * 0.99d;
        if (value > 0) {
            return value;
        }
        return 0.01d;
    }



    private static TestCase readTestRowFromLine(String line, int inputsize, double scale) {
        String[] input = line.split(",");

        int expectation = Integer.parseInt(input[0]);
        double[] inputs = new double[inputsize];

        for (int i = 1; i <= inputs.length; i++) {
            inputs[i-1] = getInputValue(input[i], scale);
        }

        return new TestCase(expectation, inputs);
    }



    private static void test(Network n, File testData, int inputsize, double scale) {
        try (BufferedReader reader = new BufferedReader(new FileReader(testData))) {
            String line;

            while ((line = reader.readLine()) != null) {

                TestCase testCase = readTestRowFromLine(line, inputsize, scale);

                TestResult res = makeTest(n, testCase);

                printTestResult(res);
            }


        } catch (IOException e) {
            System.out.println(e.getMessage());
        }
    }



    private static TestResult makeTest(Network n, TestCase testCase) {
        double[] results = n.query(testCase.getInputs());

        return new TestResult(testCase.getExpectation(), results);
    }



    private static void printTestResult(TestResult result) {
        if (result.isSuccessful()) {
            System.out.print(toGreen("SUCCESS: ") + "expected " + result.getExpectation() + " Got " + result.getActual());
        } else {
            System.out.print(toRed("FAIL: ") + "expected" + result.getExpectation() + " Got " + result.getActual());
        }

        for (int i = 0; i < result.getValues().length; i++) {
            if (i == result.getExpectation() && result.isSuccessful()) {
                System.out.print(toGreen(String.format("% .2f", result.getValues()[i])));
            } else if (i == result.getExpectation()) {
                System.out.print(toYellow(String.format("% .2f", result.getValues()[i])));
            } else if(i == result.getActual()) {
                System.out.print(toRed(String.format("% .2f", result.getValues()[i])));
            } else {
                System.out.printf("% .2f", result.getValues()[i]);
            }
        }
        System.out.println();
    }

    private static String toRed(String string) {
        return "\033[31m" + string + "\033[0m";
    }

    private static String toGreen(String string) {
        return "\033[32m" + string + "\033[0m";
    }

    private static String toYellow(String string) {
        return "\033[33m" + string + "\033[0m";
    }
}
