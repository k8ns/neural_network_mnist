
import java.io.*;
import nn.*;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {

    public static void main(final String[] args) {
        //stageTrainAndTest();
        prodTrainAndTest();
        System.out.println("Done");
    }


    private static void stageTrainAndTest() {
        Network network = new Network();
        network.addLayer(25);
        network.addLayer(20);
        network.addLayer(10);

        for (int i = 0; i < 1000; i++) {
            train(network, new File("./stage_train.csv"), 25, 1.0);
        }

        test(network, new File("./stage_test.csv"), 25, 1.0);
    }


    private static void prodTrainAndTest() {
        Network network = new Network();
        network.addLayer(784);
        network.addLayer(200);
        network.addLayer(10);

        for (int i = 0; i < 10; i++) {
            train(network, new File("./mnist_train_short.csv"), 784, 255.0);
        }
        test(network, new File("./mnist_test_short.csv"), 784, 255.0);
    }

    private static void train(Network n, File trainData, int inputsize, double scale) {
        try (BufferedReader reader = new BufferedReader(new FileReader(trainData))) {
            String s;

            while ((s = reader.readLine()) != null) {
                String[] input = s.split(",");

                int target = Integer.valueOf(input[0]);
                double[] targets = new double[]{0.01d, 0.01d, 0.01d, 0.01d, 0.01d, 0.01d, 0.01d, 0.01d, 0.01d, 0.01d};
                targets[target] = 0.99d;

                double[] inputs = new double[inputsize];

                for (int i = 1; i <= inputs.length; i++) {
                    inputs[i-1] = getInputValue(input[i], scale);
                }

                n.train(inputs, targets);
            }
        } catch (IOException e) {
            System.out.println(e.getMessage());
        }
    }

    private static double getInputValue(String val, double scale) {
        double value = Double.valueOf(val) / scale * 0.99d;
        if (value > 0) {
            return value;
        }
        return 0.01d;
    }

    private static void test(Network n, File testData, int inputsize, double scale) {
        try (BufferedReader reader = new BufferedReader(new FileReader(testData))) {
            String s;

            while ((s = reader.readLine()) != null) {

                String[] input = s.split(",");

                int expectation = Integer.valueOf(input[0]);
                double[] inputs = new double[inputsize];


                for (int i = 1; i <= inputs.length; i++) {
                    inputs[i-1] = getInputValue(input[i], scale);
                }

                int result = 0;
                double[] results = n.query(inputs);

                double max = Double.MIN_VALUE;

                for( int i = 0; i < results.length; i++ ) {
                    if (results[i] > max) {
                        max = results[i];
                        result = i;
                    }
                }

                if (expectation == result) {
                    System.out.println(toGreen("SUCCESS: ") + expectation + " Got " + result);
                } else {
                    System.out.println("Expected " + expectation + " Got " + result);
                }

                for(int i = 0; i < results.length; i++) {
                    if (i == expectation && expectation == result) {
                        System.out.print(toGreen(String.format("% .2f", results[i])));
                    } else if (i == expectation) {
                        System.out.print(toYellow(String.format("% .2f", results[i])));
                    } else if(i == result) {
                        System.out.print(toRed(String.format("% .2f", results[i])));
                    } else {
                        System.out.printf("% .2f", results[i]);
                    }

                }
                System.out.println();
            }


        } catch (IOException e) {
            System.out.println(e.getMessage());
        }
    }

    private static String toRed(String string) {
        return "\033[31m" + string + "\033[0m";
    }

    private static String toGreen(String string) {
        return "\033[32m" + string + "\033[0m";
    }

    private static String toYellow(String string) {
        return "\033[33m" + string + "\033[0m";
    }

    private static void prepareTrainTestShortFiles() {
        copyWithLimit(new File("./mnist_train.csv"), new File("./mnist_train_short.csv"), 1000);
        copyWithLimit(new File("./mnist_test.csv"), new File("./mnist_test_short.csv"), 10);
    }

    private static void copyWithLimit(File source, File destination, int rows) {

        try (
                BufferedReader reader = new BufferedReader(new FileReader(source));
                BufferedWriter writer = new BufferedWriter(new FileWriter(destination))
        ) {
            String s;
            int counter = 0;
            while (counter < rows && (s = reader.readLine()) != null) {
                counter++;
                writer.write(s);
                writer.write("\n");
            }
            writer.flush();
        } catch (IOException e) {
            System.out.println(e.getMessage());
        }
    }
}
